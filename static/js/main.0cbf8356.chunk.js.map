{"version":3,"sources":["images/kukat.jpg","components/Gameboard.js","components/SetUpNewGame/StartSettingQuestion.js","components/SetUpNewGame/SmallDot.js","components/SetUpNewGame/LargeDot.js","components/SetUpNewGame/DottedSelectionSlider.js","components/cardSides/CardBack.js","components/SetUpNewGame/Stack.js","components/SetUpNewGame/SelectStack.js","reducers/gameReducer.js","components/SetUpNewGame/SetUpNewGame.js","components/SetUpNewGame/createStacks.js","components/NopsaGame.js","reducers/rootReducer.js","App.js","index.js"],"names":["module","exports","ConnectedGameboard","connect","state","game","props","console","log","View","styles","StyleSheet","create","container","alignItems","marginTop","questionText","color","fontFamily","fontWeight","buttonView","backgroundColor","padding","borderRadius","buttonText","StartSettingQuestion","start","unitHeight","visibility","Animated","Value","animatedVisibility","opacity","style","Text","fontSize","TouchableOpacity","onPress","timing","toValue","duration","setTimeout","SmallDot","value","dotViewWidth","styleOuterView","width","height","justifyContent","styleInnerView","dotNumber","LargeDot","handleSelectionChanged","borderWidth","borderColor","marginBottom","instructionText","dotSliderView","flexDirection","DottedSelectionSlider","React","forwardRef","ref","instruction","item","unitWidth","number","useState","setValue","newValue","changeInterval","startValue","changes","Math","max","setInterval","clearInterval","getSelectedValue","useImperativeHandle","dots","i","push","key","displayDotSlider","CardBack","Image","flex","source","cardBackImage","Stack","displayColor","selectStack","stackStyle","SelectStack","selectedStack","setSelectedStack","changedSelection","id","getSelectedStack","player","computer","borderColorStack1","borderColorStack2","initialState","isOn","gameReducer","action","type","data","mapDispatchToProps","setGameSettings","settings","ConnectedSetUpNewGame","startSetting","setStartSetting","referenceSkill","createRef","referenceSpeed","referenceStack","stacks","stack","j","suit","stackShuffled","shuffle","slice","createStacks","skill","current","speed","playerStack","computerStack","ConnectedNopsaGame","screenWidth","Dimensions","get","screenHeight","min","screen","appContainer","titleView","titleText","fontWeigth","infoText","Header","rootReducer","combineReducers","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cbf8356.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kukat.9a1d9e25.jpg\";","import React from 'react'\nimport { View } from 'react-native'\nimport { connect } from 'react-redux'\n\n\n\n// Gameboard area sizes shall be the following (* unitHeight):\n//      0.5 header area\n//      1.5 computer solitaire area\n//      0.8 spacing\n//      1.0 playing packs\n//      0.8 spacing\n//      1.5 player solitaire\n//      0.5 info area\n\n\n\nconst Gameboard = (props) => {\n    console.log('props', props)\n    return (\n        <View>\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n\n}\n\nconst ConnectedGameboard = connect(mapStateToProps, mapDispatchToProps)(Gameboard)\n\nexport default ConnectedGameboard","import React from 'react'\nimport {  View, Text, TouchableOpacity, Animated, StyleSheet } from 'react-native'\n\n\n\nconst StartSettingQuestion = ({ start, unitHeight }) => {\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n    const fadeOut = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        setTimeout(() => {\n            start()\n        }, 1000)\n    }\n\n    return (\n\n        <View>\n            <Animated.View style={animatedVisibility}>\n                <View style={styles.container}>\n                    <Text style={[styles.questionText, { fontSize: unitHeight / 5 }]}>feel like playing?</Text>\n                    <TouchableOpacity onPress={fadeOut} style={[styles.buttonView, { marginTop: unitHeight / 3 }]}>\n                        <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>setup a new game</Text>\n                    </TouchableOpacity>\n                </View>\n            </Animated.View>\n        </View>\n    )\n\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginTop: 50,\n    },\n    questionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n    },\n    buttonView: {\n        backgroundColor: '#B9CC3F',\n        padding: 10,\n        borderRadius: 8,\n    },\n    buttonText: {\n        color: 'green',\n        fontFamily: 'Arial',\n    },\n})\n\n\n\n\nexport default StartSettingQuestion\n\n","import React from 'react'\nimport {  View } from 'react-native'\n\nconst SmallDot = ({ value, dotViewWidth, dotNumber }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        opacity: changingOpacity,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 3,\n    }\n\n\n    return (\n        <View style={styleOuterView}>\n            <View style={styleInnerView}/>\n        </View>\n    )\n}\n\nexport default SmallDot\n\n","import React from 'react'\nimport {  View, TouchableOpacity } from 'react-native'\n\n\nconst LargeDot = ({ value, dotNumber, dotViewWidth, handleSelectionChanged }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1.5,\n        opacity: changingOpacity,\n        borderColor: '#B9CC3F',\n        borderRadius: dotViewWidth,\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 2.0,\n    }\n\n\n    return (\n        <TouchableOpacity onPress={() => handleSelectionChanged(dotNumber)}>\n            <View style={styleOuterView}>\n                <View  style={styleInnerView}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default LargeDot","import React, { useState, useImperativeHandle } from 'react'\nimport {  View, Text, StyleSheet } from 'react-native'\nimport SmallDot from './SmallDot'\nimport LargeDot from './LargeDot'\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginBottom: 50,\n    },\n    instructionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n        marginBottom: 15,\n    },\n    dotSliderView: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n})\n\n\n\nconst DottedSelectionSlider = React.forwardRef((props, ref) => {\n\n    const instruction = props.item === 'skill' ?\n        'select opponent skill level'\n        :\n        'select opponent speed'\n    const unitWidth = props.unitWidth\n    const unitHeight = unitWidth * 1.7\n    const number = props.number\n    const dotViewWidth = 6 * unitWidth / 30\n\n    const [value, setValue] = useState(1)\n\n    const handleSelectionChanged = (newValue) => {\n        let startValue = value\n        const changes = Math.max(newValue - value, value - newValue)\n        function changeDotIntervalUp() {\n            return setInterval(() => {\n                if (startValue < newValue) {\n                    startValue++\n                    setValue(startValue)\n                }\n            }, 180 / changes)\n        }\n        function changeDotIntervalDown() {\n            return setInterval(() => {\n                if (newValue < startValue) {\n                    startValue--\n                    setValue(startValue)\n                }\n            }, 180 / changes)\n        }\n        let changeInterval\n        if (value < newValue) {\n            changeInterval = changeDotIntervalUp()\n        } else if (value > newValue) {\n            changeInterval = changeDotIntervalDown()\n        }\n        setTimeout(() => {\n            clearInterval(changeInterval)\n        }, 180 * changes)\n    }\n\n    const getSelectedValue = () => {\n        return (value - 1) / 6 + 1\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedValue }\n    })\n\n    const displayDotSlider = () => {\n        let dots = []\n        for (let i = 1; i <= number * 6 + 1; i++) {\n            if ((i - 1) % 6 !== 0) {\n                dots.push(\n                    <SmallDot\n                        key={i}\n                        value={value}\n                        dotViewWidth={dotViewWidth}\n                        dotNumber={i}\n                    />)\n            } else {\n                dots.push(\n                    <LargeDot\n                        key={i}\n                        value={value}\n                        dotViewWidth={dotViewWidth}\n                        handleSelectionChanged={handleSelectionChanged}\n                        dotNumber={i}\n                    />)\n            }\n        }\n        return dots\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text style={[styles.instructionText, { fontSize: unitHeight / 5 }]}>{instruction}</Text>\n            <View style={styles.dotSliderView}>\n                {displayDotSlider()}\n            </View>\n        </View>\n\n    )\n})\n\nexport default DottedSelectionSlider\n\n\n","import React from 'react'\nimport { Image } from 'react-native'\nimport cardBackImage from '../../images/kukat.jpg'\n\nconst CardBack = () => {\n\n\n    return (\n        <Image\n            style={{ flex: 1, borderRadius: 7 }}\n            source={cardBackImage}\n        />\n    )\n}\n\nexport default CardBack\n\n\n\n","import React from 'react'\nimport { View, TouchableOpacity } from 'react-native'\nimport CardBack from '../cardSides/CardBack'\n\nconst Stack = ({ displayColor, number, selectStack, unitWidth }) => {\n\n    const stackStyle = {\n        width: unitWidth * 1.5,\n        height: unitWidth * 1.7 * 1.3,\n        borderRadius: 7 * 1.3, borderWidth: 1.3,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n\n    return (\n        <TouchableOpacity onPress={() => selectStack(number)}>\n            <View style={[stackStyle, displayColor]}>\n                <View style={{ width: unitWidth, height: unitWidth * 1.7, borderRadius: 7 }}>\n                    <CardBack/>\n                </View>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default Stack\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\nimport Stack from './Stack'\n\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginBottom: 50,\n    },\n    instructionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n        marginBottom: 15,\n    },\n})\n\n\nconst SelectStack = React.forwardRef((props, ref) => {\n\n    const unitWidth = props.unitWidth\n    const unitHeight = unitWidth * 1.7\n\n    const [selectedStack, setSelectedStack] = useState(0)\n\n    const changedSelection = (id) => {\n        setSelectedStack(id)\n    }\n\n    const getSelectedStack = () => {\n        const computerStack = selectedStack === 0 ? 1 : 0\n        return { player: selectedStack, computer: computerStack }\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedStack }\n    })\n\n    const borderColorStack1 = selectedStack === 0 ? { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n    const borderColorStack2 = selectedStack === 1 ?  { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n\n\n    return (\n        <View style={styles.container}>\n            <Text style={[styles.instructionText, { fontSize: unitHeight / 5 }]}>select your stack of cards</Text>\n            <View style={{ flexDirection: 'row' }}>\n                <Stack displayColor={borderColorStack1} number={0} selectStack={changedSelection} unitWidth={unitWidth}/>\n                <View style={{ width: 30 }}/>\n                <Stack displayColor={borderColorStack2} number={1} selectStack={changedSelection} unitWidth={unitWidth}/>\n            </View>\n        </View>\n    )\n})\n\nexport default SelectStack\n\n","const initialState = { isOn: false }\n\nconst gameReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n    case 'SET_GAME_SETTINGS':\n        return action.data\n    default:\n        return state\n    }\n\n}\n\nexport const setGameSettings = (settings) => {\n    return {\n        type: 'SET_GAME_SETTINGS',\n        data: settings,\n    }\n}\n\n\nexport default gameReducer\n\n","import React, { useState } from 'react'\nimport { View, Text, TouchableOpacity, StyleSheet, Animated } from 'react-native'\nimport { connect } from 'react-redux'\nimport StartSettingQuestion from './StartSettingQuestion'\nimport DottedSelectionSlider from './DottedSelectionSlider'\nimport SelectStack from './SelectStack'\nimport { setGameSettings } from '../../reducers/gameReducer'\nimport { createStacks } from './createStacks.js'\n\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginTop: 50,\n    },\n    questionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n    },\n    buttonView: {\n        backgroundColor: '#B9CC3F',\n        padding: 10,\n        borderRadius: 8,\n    },\n    buttonText: {\n        color: 'green',\n        fontFamily: 'Arial',\n    },\n})\n\n\n\nconst SetUpNewGame = (props) => {\n\n    const [startSetting, setStartSetting] = useState(false)\n    const unitHeight = props.unitHeight\n    const unitWidth = props.unitWidth\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n\n    const start = () => {\n        setStartSetting(true)\n    }\n\n    const referenceSkill = React.createRef()\n    const referenceSpeed = React.createRef()\n    const referenceStack = React.createRef()\n\n    const saveSettings = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n\n        const stacks = createStacks()\n\n        setTimeout(() => {\n            props.setGameSettings({\n                skill: referenceSkill.current.getSelectedValue(),\n                speed: referenceSpeed.current.getSelectedValue(),\n                playerStack: stacks[referenceStack.current.getSelectedStack().player],\n                computerStack : stacks[referenceStack.current.getSelectedStack().computer],\n                isOn: true,\n            })\n        }, 1000)\n    }\n\n    return (\n        <Animated.View style={animatedVisibility}>\n            {!startSetting ?\n                <StartSettingQuestion start={start} unitHeight={unitHeight}/>\n                :\n                <View style={styles.container}>\n                    <DottedSelectionSlider\n                        item=\"skill\"\n                        unitWidth={unitWidth}\n                        number={2}\n                        ref={referenceSkill}\n                    />\n                    <DottedSelectionSlider\n                        item=\"speed\"\n                        unitWidth={unitWidth}\n                        number={4}\n                        ref={referenceSpeed}\n                    />\n                    <SelectStack\n                        unitWidth={unitWidth}\n                        ref={referenceStack}\n                    />\n                    <TouchableOpacity onPress={saveSettings} style={styles.buttonView}>\n                        <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>save settings</Text>\n                    </TouchableOpacity>\n                </View>\n            }\n        </Animated.View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n    setGameSettings,\n}\n\nconst ConnectedSetUpNewGame = connect(mapStateToProps, mapDispatchToProps)(SetUpNewGame)\n\nexport default ConnectedSetUpNewGame\n","import shuffle from 'shuffle-array'\n\nexport const createStacks = () => {\n    const stack = []\n    for (let j = 1; j < 5; j++) {\n\n        for (let i = 1; i < 14; i++) {\n            stack.push({ suit: j, value: i })\n        }\n\n    }\n\n    const stackShuffled = shuffle(stack)\n\n    return [ stackShuffled.slice(0, 26), stackShuffled.slice(26) ]\n}\n\n","import React from 'react'\nimport { View, Text, Dimensions, StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport Gameboard from './Gameboard'\nimport SetUpNewGame from '../components/SetUpNewGame/SetUpNewGame'\n\n\nconst NopsaGame = (props) => {\n\n    const screenWidth = Dimensions.get('window').width\n    const screenHeight = Dimensions.get('window').height\n    const unitWidth = Math.min(screenWidth / 6, (screenHeight / (6.6 * 1.7)))\n    const unitHeight = 1.7 * unitWidth\n\n    const styles = StyleSheet.create({\n        screen: {\n            backgroundColor: 'green',\n            alignItems: 'center',\n            width: screenWidth,\n            height: screenHeight,\n            justifyContent: 'center',\n        },\n        appContainer: {\n            width: unitWidth * 6,\n            height: unitHeight * 6.6,\n            backgroundColor: 'green',\n        },\n        titleView: {\n            height: unitHeight / 2,\n            alignItems: 'center',\n        },\n        titleText: {\n            fontSize: unitHeight / 3.75,\n            fontWeigth: 'bold',\n            color: '#B9CC3F',\n            fontFamily: 'Arial Black',\n        },\n        infoText: {\n            fontSize: unitHeight / 9,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n        },\n    })\n\n    const Header = () => {\n        return (\n            <View style={styles.titleView}>\n                <Text style={styles.titleText}>nopsa</Text>\n                <Text style={styles.infoText}>a card game for those with skill, speed and luck</Text>\n            </View>\n        )\n    }\n\n\n    return (\n        <View>\n            <View style={styles.screen}>\n                <View style={styles.appContainer}>\n                    <Header/>\n                    {props.game.isOn ?\n                        <Gameboard\n                            unitWidth={unitWidth}\n                            unitHeight={unitHeight}\n                        />\n                        :\n                        <SetUpNewGame\n                            unitWidth={unitWidth}\n                            unitHeight={unitHeight}\n                        />\n\n                    }\n                </View>\n            </View>\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n}\n\nconst ConnectedNopsaGame = connect(mapStateToProps, mapDispatchToProps)(NopsaGame)\n\nexport default ConnectedNopsaGame\n\n\n\n\n","import { combineReducers } from 'redux'\nimport gameReducer from './gameReducer'\n\nconst rootReducer = combineReducers({\n    game: gameReducer,\n})\n\nexport default rootReducer\n\n\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport NopsaGame from './components/NopsaGame'\nimport rootReducer from './reducers/rootReducer'\n\n\nconst store = createStore(rootReducer)\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <NopsaGame/>\n        </Provider>\n    )\n}\n\nexport default App\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n// import './index.css'\nimport App from './App'\n// import * as serviceWorker from './serviceWorker'\n\n// ReactDOM.render(\n//     <React.StrictMode>\n//         <App />\n//     </React.StrictMode>,\n//     document.getElementById('root'),\n// )\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister()\n\n\n"],"sourceRoot":""}