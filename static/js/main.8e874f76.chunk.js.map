{"version":3,"sources":["components/Gameboard.js","components/SetNewGame.js","components/NopsaGame.js","reducers/gameReducer.js","reducers/rootReducer.js","App.js","index.js"],"names":["ConnectedGameboard","connect","state","game","view","props","View","ConnectedSetNewGame","ConnectedNopsaGame","screenWidth","Dimensions","get","width","screenHeight","height","unitWidth","Math","min","unitHeight","styles","StyleSheet","create","screen","backgroundColor","alignItems","justifyContent","appContainer","titleView","titleText","fontSize","fontWeigth","color","fontFamily","infoText","style","isOn","Text","initialState","gameReducer","action","type","data","rootReducer","combineReducers","store","createStore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAoCeA,EAFYC,aAXH,SAAAC,GACpB,MAAO,CACHC,KAAMD,EAAMC,KACZC,KAAMF,EAAME,QAIO,GAIAH,EAjBT,SAACI,GACf,OACI,kBAACC,EAAA,EAAD,SCOOC,EAFaN,aAVJ,SAAAC,GACpB,MAAO,CACHC,KAAMD,EAAMC,QAIO,GAICF,EApBT,SAACI,GAGhB,OACI,kBAACC,EAAA,EAAD,SC6EOE,EAFYP,aATH,SAAAC,GACpB,MAAO,CACHC,KAAMD,EAAMC,QAIO,GAGAF,EA5ET,SAACI,GAEf,IAAMI,EAAcC,IAAWC,IAAI,UAAUC,MACvCC,EAAeH,IAAWC,IAAI,UAAUG,OACxCC,EAAYC,KAAKC,IAAIR,EAAc,EAAII,GAAgB,IAAM,MAC7DK,EAAa,IAAMH,EAEnBI,EAASC,IAAWC,OAAO,CAC7BC,OAAQ,CACJC,gBAAiB,QACjBC,WAAY,SACZZ,MAAOH,EACPK,OAAQD,EACRY,eAAgB,UAEpBC,aAAc,CACVd,MAAmB,EAAZG,EACPD,OAAqB,IAAbI,EACRK,gBAAiB,SAErBI,UAAW,CACPb,OAAQI,EAAa,EACrBO,eAAgB,SAChBD,WAAY,UAEhBI,UAAW,CACPC,SAAUX,EAAa,KACvBY,WAAY,OACZC,MAAO,UACPC,WAAY,eAEhBC,SAAU,CACNJ,SAAUX,EAAa,EACvBa,MAAO,UACPC,WAAY,WAMpB,OACI,kBAAC1B,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,CAAM4B,MAAOf,EAAOG,QAChB,kBAAChB,EAAA,EAAD,CAAM4B,MAAOf,EAAOO,cACfrB,EAAMF,KAAKgC,KACR,kBAAC,EAAD,CACIpB,UAAWA,EACXG,WAAYA,IAGhB,kBAACZ,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,CAAM4B,MAAOf,EAAOQ,WAChB,kBAACS,EAAA,EAAD,CAAMF,MAAOf,EAAOS,WAApB,SACA,kBAACQ,EAAA,EAAD,CAAMF,MAAOf,EAAOc,UAApB,qDAEJ,kBAAC,EAAD,CACIlB,UAAWA,EACXG,WAAYA,WChEtCmB,EAAe,CAAEF,MAAM,GAqBdG,EAnBK,WAAmC,IAAlCpC,EAAiC,uDAAzBmC,EAAcE,EAAW,uCAElD,OAAQA,EAAOC,MACf,IAAK,oBACD,OAAOD,EAAOE,KAClB,QACI,OAAOvC,ICDAwC,EAJKC,YAAgB,CAChCxC,KAAMmC,ICGJM,EAAQC,YAAYH,GAUXI,EARH,WACR,OACI,kBAAC,IAAD,CAAUF,MAAOA,GACb,kBAAC,EAAD,QCNZG,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.8e874f76.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport { connect } from 'react-redux'\n\n\n\n// Gameboard area sizes shall be the following (* unitHeight):\n//      0.5 title area\n//      1.5 computer solitaire area\n//      0.8 spacing\n//      1.0 playing packs\n//      0.8 spacing\n//      1.5 player solitaire\n//      0.5 info area\n\n\n\nconst Gameboard = (props) => {\n    return (\n        <View></View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n        view: state.view,\n    }\n}\n\nconst mapDispatchToProps = {\n\n}\n\nconst ConnectedGameboard = connect(mapStateToProps, mapDispatchToProps)(Gameboard)\n\nexport default ConnectedGameboard","import React, { useState } from 'react'\nimport { View } from 'react-native'\nimport { connect } from 'react-redux'\n\nconst SetNewGame = (props) => {\n\n\n    return (\n        <View>\n\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n\n}\n\nconst ConnectedSetNewGame = connect(mapStateToProps, mapDispatchToProps)(SetNewGame)\n\nexport default ConnectedSetNewGame\n","import React from 'react'\nimport { View, Text, Dimensions, StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport Gameboard from './Gameboard'\nimport SetNewGame from './SetNewGame'\n\n\nconst NopsaGame = (props) => {\n\n    const screenWidth = Dimensions.get('window').width\n    const screenHeight = Dimensions.get('window').height\n    const unitWidth = Math.min(screenWidth / 6, (screenHeight / (6.6 * 1.7)))\n    const unitHeight = 1.7 * unitWidth\n\n    const styles = StyleSheet.create({\n        screen: {\n            backgroundColor: 'green',\n            alignItems: 'center',\n            width: screenWidth,\n            height: screenHeight,\n            justifyContent: 'center',\n        },\n        appContainer: {\n            width: unitWidth * 6,\n            height: unitHeight * 6.6,\n            backgroundColor: 'green',\n        },\n        titleView: {\n            height: unitHeight / 2,\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n        titleText: {\n            fontSize: unitHeight / 3.75,\n            fontWeigth: 'bold',\n            color: '#B9CC3F',\n            fontFamily: 'Arial Black',\n        },\n        infoText: {\n            fontSize: unitHeight / 9,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n        },\n    })\n\n\n\n    return (\n        <View>\n            <View style={styles.screen}>\n                <View style={styles.appContainer}>\n                    {props.game.isOn ?\n                        <Gameboard\n                            unitWidth={unitWidth}\n                            unitHeight={unitHeight}\n                        />\n                        :\n                        <View>\n                            <View style={styles.titleView}>\n                                <Text style={styles.titleText}>nopsa</Text>\n                                <Text style={styles.infoText}>a card game for those with skill, speed and luck</Text>\n                            </View>\n                            <SetNewGame\n                                unitWidth={unitWidth}\n                                unitHeight={unitHeight}\n                            />\n                        </View>\n                    }\n                </View>\n            </View>\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n}\n\nconst ConnectedNopsaGame = connect(mapStateToProps, mapDispatchToProps)(NopsaGame)\n\nexport default ConnectedNopsaGame\n\n\n\n\n","const initialState = { isOn: false }\n\nconst gameReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n    case 'SET_GAME_SETTINGS':\n        return action.data\n    default:\n        return state\n    }\n\n}\n\nexport const setGameSettings = (settings) => {\n    return {\n        type: 'SET_GAME_SETTINGS',\n        data: settings,\n    }\n}\n\n\nexport default gameReducer\n\n","import { combineReducers } from 'redux'\nimport gameReducer from './gameReducer'\n\nconst rootReducer = combineReducers({\n    game: gameReducer,\n})\n\nexport default rootReducer\n\n\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport NopsaGame from './components/NopsaGame'\nimport rootReducer from './reducers/rootReducer'\n\n\nconst store = createStore(rootReducer)\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <NopsaGame/>\n        </Provider>\n    )\n}\n\nexport default App\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n// import './index.css'\nimport App from './App'\n// import * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister()\n\n\n"],"sourceRoot":""}