{"version":3,"sources":["components/cardSides/CardFront.js","components/PlayTheGame/GamingStacks.js","components/cardSides/CardBackSimple.js","components/PlayTheGame/helperFunctions.js","components/PlayTheGame/PlayerCardControlled.js","components/PlayTheGame/Gameboard.js","components/SetUpNewGame/StartSettingQuestion.js","components/SetUpNewGame/SmallDot.js","components/SetUpNewGame/LargeDot.js","components/SetUpNewGame/DottedSelectionSlider.js","components/cardSides/CardBack.js","components/SetUpNewGame/Stack.js","components/SetUpNewGame/SelectStack.js","reducers/gameReducer.js","components/SetUpNewGame/SetUpNewGame.js","components/SetUpNewGame/createStacks.js","components/NopsaGame.js","reducers/rootReducer.js","App.js","index.js","images/kukat.jpg"],"names":["CardFront","suit","value","color","char","cardText","View","style","justifyContent","alignItems","Text","fontSize","GamingStacks","topmostLeft","topmostRight","unitWidth","cardViewStyle","position","width","height","borderRadius","zIndex","colorLeft","colorRight","flexDirection","left","top","backgroundColor","CardBackSimple","getCardSolitaireLocationForDealing","index","bufferLeft","unitHeight","origoY","posX","posY","x","y","getCardFlipState","count","flip","PlayerCardControlled","React","forwardRef","props","ref","isNull","card","origo","topmostGamingRight","useState","location","displayCardFront","setDisplayCardFront","Animated","ValueXY","animatedMove","animatedMoveStyle","transform","translateX","translateY","animatedFlipPart1","Value","animatedFlipPart1Style","rotateX","interpolate","inputRange","outputRange","animatedFlipPart2","animatedFlipPart2Style","performAction","actions","move","sequence","timing","toValue","tension","friction","duration","start","setTimeout","delay","useImperativeHandle","animatedDraggable","dragStyle","handleReleasedCard","releaseX","releaseY","wasReleasedOnRight","gamingRightX","gamingRightY","wasReleasedOnRightGamingPackArea","wasReleasedOnRightGamingPack","valueOkForRight","currentTopmostValue","newValue","console","log","valueIsSuitable","rightGamingPack","solitaireStartingPosition","moveCardOntoRightGamePack","updateRightGamingPack","panResponder","PanResponder","create","onStartShouldSetPanResponder","evt","gestureState","onPanResponderMove","event","dx","dy","onPanResponderRelease","moveX","moveY","FlippableCard","cardStyle","style1","style2","style3","TouchableOpacity","disabled","panHandlers","ConnectedGameboard","connect","state","game","playerStack","topmostGamingLeft","setTopmostGamingRight","dealingCount","setDealingCount","cardCount","nullStates","i","push","getCardStartNullStates","length","cardNull","setCardNull","rightDealingPackLocation","rightGamingPackLocation","map","createRef","cardReferences","playerCardIndex","updatedNullStates","indexOfCardBelow","getCardBelow","current","key","styles","buttonContainer","onPress","dealingActions","willFlip","getPlayerCardActionsInDealing","numberOfActions","buttonView","buttonText","nextIndexToDeal","StyleSheet","padding","fontFamily","container","marginTop","questionText","fontWeight","StartSettingQuestion","visibility","animatedVisibility","opacity","SmallDot","dotViewWidth","styleOuterView","styleInnerView","dotNumber","LargeDot","handleSelectionChanged","borderWidth","borderColor","marginBottom","instructionText","dotSliderView","DottedSelectionSlider","instruction","item","number","setValue","changeInterval","startValue","changes","Math","max","setInterval","clearInterval","getSelectedValue","dots","displayDotSlider","CardBack","Image","flex","source","cardBackImage","Stack","displayColor","selectStack","stackStyle","SelectStack","selectedStack","setSelectedStack","changedSelection","id","getSelectedStack","player","computer","borderColorStack1","borderColorStack2","initialState","isOn","gameReducer","action","type","data","mapDispatchToProps","setGameSettings","settings","ConnectedSetUpNewGame","startSetting","setStartSetting","referenceSkill","referenceSpeed","referenceStack","stacks","stack","j","stackShuffled","shuffle","slice","createStacks","skill","speed","computerStack","ConnectedNopsaGame","screenWidth","Dimensions","get","screenHeight","min","screen","appContainer","titleView","titleText","fontWeigth","infoText","Header","rootReducer","combineReducers","store","createStore","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c276a433.chunk.js","sourcesContent":["import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst CardFront = ({ suit, value }) => {\n    let color = 'black'\n    let char = ''\n    switch (suit) {\n    case 2:\n        char = '♥'\n        color = 'red'\n        break\n    case 3:\n        char = '♣'\n        break\n    case 4:\n        char = '♦'\n        color = 'red'\n        break\n    default:\n        char = '♠'\n        break\n    }\n    const cardText = value === 1 ? 'A' : value\n\n    return (\n        <View  style={{ justifyContent: 'center', alignItems: 'center' }}>\n            <Text style={{ color: color, fontSize: 30 }}>{char}</Text>\n            <Text style={{ color: color, fontSize: 30 }}>{cardText}</Text>\n        </View>\n    )\n}\n\n\nexport default CardFront\n\n\n","import React from 'react'\nimport { View } from 'react-native'\nimport CardFront from '../cardSides/CardFront'\n\n\nconst GamingStacks = ({ topmostLeft, topmostRight,  unitWidth }) => {\n    const cardViewStyle = { position: 'absolute',\n        width: unitWidth,\n        height: 1.7 * unitWidth,\n        borderRadius: 7,\n        zIndex: 0,\n    }\n\n    const colorLeft = topmostLeft === '' ? 'green' : 'papayawhip'\n    const colorRight = topmostRight === '' ? 'green' : 'papayawhip'\n\n    return (\n        <View style={{ flexDirection: 'row' }}>\n            <View style={[cardViewStyle, { left: 0, top: 0, backgroundColor: colorLeft  }]}>\n                {topmostLeft !== '' ?\n                    <CardFront suit={topmostLeft.suit} value={topmostLeft.value}/>\n                    :\n                    null\n                }\n            </View>\n            <View style={[cardViewStyle, { left: 1.5 * unitWidth, top: 0, backgroundColor: colorRight  }]}>\n                {topmostRight !== '' ?\n                    <CardFront suit={topmostRight.suit} value={topmostRight.value}/>\n                    :\n                    null\n                }\n            </View>\n        </View>\n    )\n}\n\nexport default GamingStacks\n\n","import React from 'react'\nimport { View, Text } from 'react-native'\n\nconst CardBackSimple = () => {\n\n    return (\n        <View  style={{ justifyContent: 'center', alignItems: 'center' }}>\n            <Text style={{ color: 'green', fontSize: 9 }}>©©©©©©©</Text>\n            <Text style={{ color: 'green', fontSize: 9 }}>©©©©©©©</Text>\n            <Text style={{ color: 'green', fontSize: 9 }}>©©©©©©©</Text>\n            <Text style={{ color: 'green', fontSize: 9 }}>©©©©©©©</Text>\n            <Text style={{ color: 'green', fontSize: 9 }}>©©©©©©©</Text>\n            <Text style={{ color: 'green', fontSize: 9 }}>©©©©©©©</Text>\n            <Text style={{ color: 'green', fontSize: 9 }}>©©©©©©©</Text>\n            <Text style={{ color: 'green', fontSize: 9 }}>©©©©©©©</Text>\n            <Text style={{ color: 'green', fontSize: 9 }}>©©©©©©©</Text>\n        </View>\n    )\n}\n\nexport default CardBackSimple\n\n","export const getPlayerCardActionsInDealing = (cardCount, unitWidth, bufferLeft) => {\n    let actions = []\n    for (let i = 0; i < cardCount; i++) {\n        if (i < 15) {\n            const location = getCardSolitaireLocationForDealing(i, unitWidth, bufferLeft)\n            const willFlip = getCardFlipState(i, cardCount)\n            actions.push({ ...location, move: true, flip: willFlip, delay: true })\n        }\n    }\n    return actions\n}\n\n\n\nexport const getCardSolitaireLocationForDealing = (index, unitWidth, bufferLeft) => {\n    const unitHeight = 1.7 * unitWidth\n    const origoY =  (1.5 + 0.8 + 1.0 + 0.8) * unitHeight\n\n    let posX = bufferLeft > 0 ? bufferLeft : 0\n    switch (index) {\n    case 0:\n        posX += 1 / 6 * unitWidth\n        break\n    case 1: case 5:\n        posX += (2 / 6  + 1)* unitWidth\n        break\n    case 2: case 6: case 9:\n        posX +=  (3 / 6 + 2) * unitWidth\n        break\n    case 3: case 7: case 10: case 12:\n        posX +=  (4 / 6 + 3) * unitWidth\n        break\n    default:\n        posX +=  (5 / 6 + 4) * unitWidth\n    }\n\n    let posY = 0\n    switch (index) {\n    case 14:\n        posY = origoY + (4 * 0.125) * unitHeight\n        break\n    case 12: case 13:\n        posY = origoY + (3 * 0.125) * unitHeight\n        break\n    case 9: case 10: case 11:\n        posY = origoY + (2 * 0.125) * unitHeight\n        break\n    case 5: case 6: case 7: case 8:\n        posY = origoY + (1 * 0.125) * unitHeight\n        break\n    default:\n        posY = origoY\n    }\n    return { x: posX, y: posY }\n}\n\n\nconst getCardFlipState = (index, count) => {\n    let flip = false\n    switch (index) {\n    case 0: case 5: case 9: case 12: case 14:\n        flip = true\n        break\n    case 1: case 2: case 3: case 4:\n        if (index + 4 > count) {\n            flip = true\n        }\n        break\n    case 6: case 7: case 8:\n        if (index + 4 > count) {\n            flip = true\n        }\n        break\n    case 10: case 11:\n        if (index + 4 > count) {\n            flip = true\n        }\n        break\n    case 13:\n        if (index + 4 > count) {\n            flip = true\n        }\n        break\n    default:\n        break\n    }\n    return flip\n}\n\nexport const wasReleasedOnRightGamingPack = (releaseX, releaseY, unitWidth, bufferLeft) => {\n    // console.log('releaseX', releaseX)\n    // console.log('releaseY', releaseY)\n    const gamingRightX = bufferLeft + (0.25 + 1 + 0.5 + 1 + 0.5) * unitWidth\n    const gamingRightY = bufferLeft + (0.5 + 1.5 + 0.8) * unitWidth * 1.7\n    // console.log('gamingRightX', gamingRightX)\n    // console.log('gamingRightY', gamingRightY)\n    let wasReleasedOnRightGamingPackArea = false\n    if (releaseX > gamingRightX && releaseX < gamingRightX + unitWidth && releaseY > gamingRightY && releaseY < gamingRightY + unitWidth * 1.7) {\n        wasReleasedOnRightGamingPackArea = true\n    }\n    return wasReleasedOnRightGamingPackArea\n}\n\nexport const valueIsSuitable = (currentTopmostValue, newValue) => {\n    console.log('')\n    if (currentTopmostValue === 1) {\n        if (newValue === 2 || newValue === 13) {\n            return true\n        }\n    } else if (currentTopmostValue === 13) {\n        if (newValue === 12 || newValue === 1) {\n            return true\n        }\n    } else {\n        if (newValue === currentTopmostValue + 1 || newValue === currentTopmostValue - 1) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n}\n\nexport const getCardStartNullStates = (cardCount) => {\n    let nullStates = []\n    for (let i = 0; i < cardCount; i++) {\n        nullStates.push(false)\n    }\n    return nullStates\n}\n\n// export const getCardDisbaledStates = (cardCount) => {\n//     let disabledStates = []\n//     for (let i = 0; i < cardCount; i++) {\n//         disabledStates.push(true)\n//     }\n//     return disabledStates\n// }\n\nexport const getCardBelow = (playerCardIndex) => {\n    let index\n    switch (playerCardIndex) {\n    case 14:\n        index = 13\n        break\n    case 13:\n        index =  11\n        break\n    case 12:\n        index =  10\n        break\n    case 11:\n        index =  8\n        break\n    case 10:\n        index =  7\n        break\n    case 9:\n        index =  6\n        break\n    case 8:\n        index =  4\n        break\n    case 7:\n        index =  3\n        break\n    case 6:\n        index =  2\n        break\n    case 5:\n        index =  1\n        break\n    default:\n        index =  -1\n    }\n    return index\n\n}","import React, { useState, useImperativeHandle } from 'react'\nimport {  View, TouchableOpacity, Animated, PanResponder } from 'react-native'\nimport CardBackSimple from '../cardSides/CardBackSimple'\nimport CardFront from '../cardSides/CardFront'\nimport { wasReleasedOnRightGamingPack, valueIsSuitable, getCardSolitaireLocationForDealing } from './helperFunctions.js'\n\nconst PlayerCardControlled = React.forwardRef((props, ref) => {\n\n    const isNull = props.isNull\n    if (isNull) {\n        return null\n    }\n\n    const unitWidth = props.unitWidth\n    const unitHeight = 1.7 * unitWidth\n    const card = props.card\n    const index = props.index\n    const origo = props.origo\n    const bufferLeft = props.bufferLeft\n    const topmostGamingRight = props.topmostGamingRight\n    const [location, setLocation] = useState(props.origo)\n\n\n    const [displayCardFront, setDisplayCardFront] = useState(false)\n\n    // for animating card frame moving around:\n    const [animatedMove, setAnimatedMove] = useState(new Animated.ValueXY())\n    const animatedMoveStyle = { transform: [ { translateX: animatedMove.x }, { translateY: animatedMove.y }] }\n\n\n    // for animating card flipping inside the moving frame:\n    let animatedFlipPart1 = new Animated.Value(0)\n    const interpolatedFlip1 = animatedFlipPart1.interpolate({\n        inputRange: [0, 180], outputRange: ['180deg', '360deg'],\n    })\n    const animatedFlipPart1Style = { transform: [  { rotateX: interpolatedFlip1 } ] }\n    let animatedFlipPart2 = new Animated.Value(90)\n    const interpolatedFlip2 = animatedFlipPart2.interpolate({\n        inputRange: [0, 180], outputRange: ['180deg', '360deg'],\n    })\n    const animatedFlipPart2Style = { transform: [ { rotateX: interpolatedFlip2 } ] }\n\n\n    // for controlling card movement and flipping from a parent component:\n    const performAction = (actions) => {\n        // console.log('TTTTTTTTTTTTTT')\n        if (actions.flip && !actions.move) {\n            Animated.sequence([\n                Animated.timing(animatedFlipPart1, {\n                    toValue: 90, tension: 10, friction: 10, duration: 300,\n                }),\n                Animated.timing(animatedFlipPart2, {\n                    toValue: 180, tension: 10, friction: 10, duration: 300,\n                }),\n            ]).start()\n            setTimeout(() => {\n                setDisplayCardFront(true)\n            }, 1600)\n            return\n        }\n        const delay = actions.delay ? 1 : 0\n        if (actions.move && actions.flip) {\n            Animated.sequence([\n                Animated.delay(500 * index * delay),\n                Animated.timing(animatedMove, {\n                    toValue: { x: actions.x -  origo.x, y: actions.y -  origo.y }, duration: 1000,\n                }),\n                Animated.timing(animatedFlipPart1, {\n                    toValue: 90, tension: 10, friction: 10, duration: 300,\n                }),\n                Animated.timing(animatedFlipPart2, {\n                    toValue: 180, tension: 10, friction: 10, duration: 300,\n                }),\n            ]).start()\n            setTimeout(() => {\n                setDisplayCardFront(true)\n\n            }, 1600 + 500 * index * delay)\n        } else if (actions.move && actions.delay) {\n            Animated.sequence([\n                Animated.delay(500 * index),\n                Animated.timing(animatedMove, {\n                    toValue: { x: actions.x -  origo.x, y: actions.y  -  origo.y }, duration: 1000,\n                }),\n            ]).start()\n        }\n    }\n\n    useImperativeHandle(ref, () => {\n        return { performAction }\n    })\n\n    const moveCardOntoRightGamePack = (releaseX, releaseY) => {\n        const rightGamingPack = { x: (0.25 + 1 + 0.5 + 1 + 0.5) * unitWidth, y: (1.5 + 0.8) * unitHeight }\n        const solitaireStartingPosition = getCardSolitaireLocationForDealing(index, unitWidth, bufferLeft)\n        Animated.timing(animatedDraggable, {\n            toValue: { x: rightGamingPack.x - solitaireStartingPosition.x, y: rightGamingPack.y - solitaireStartingPosition.y }, duration: 500,\n        }).start()\n    }\n\n\n    let animatedDraggable = new Animated.ValueXY()\n    const dragStyle = { transform: [ { translateX: animatedDraggable.x }, { translateY: animatedDraggable.y }] }\n\n    const returnCardToStartDragPosition = () => {\n        Animated.timing(animatedDraggable, {\n            toValue: { x: 0, y: 0 }, duration: 500,\n        }).start()\n    }\n\n    const moveCardAlongDrag = (dx, dy) => {\n        Animated.timing(animatedDraggable, {\n            toValue: { x: dx, y: dy }, duration: 0,\n        }).start()\n    }\n\n    const handleReleasedCard = (releaseX, releaseY) => {\n        const wasReleasedOnRight = wasReleasedOnRightGamingPack(releaseX, releaseY, unitWidth, bufferLeft)\n        const valueOkForRight = valueIsSuitable(topmostGamingRight.value, card.value)\n        if (wasReleasedOnRight && valueOkForRight) {\n            moveCardOntoRightGamePack(releaseX, releaseY)\n            setTimeout(() => {\n                props.updateRightGamingPack(index)\n            }, 500)\n        } else {\n            returnCardToStartDragPosition()\n        }\n\n    }\n    const panResponder = PanResponder.create({\n        onStartShouldSetPanResponder: (evt, gestureState) => true,\n        onPanResponderMove: (event, gestureState) => {\n            moveCardAlongDrag(gestureState.dx, gestureState.dy)\n        },\n        onPanResponderRelease: (evt, gestureState) => {\n            handleReleasedCard(gestureState.moveX, gestureState.moveY)\n        },\n    })\n\n\n    const FlippableCard = () => {\n        const cardStyle = {\n            width: unitWidth,\n            height: unitWidth * 1.7,\n            borderRadius: 7,\n        }\n        const style1 = { ...cardStyle, backgroundColor: 'papayawhip' }\n        const style2 = { ...style1, top: -unitWidth * 1.7 }\n        const style3 = { ...cardStyle, backgroundColor: '#B9CC3F' }\n\n        return (\n            <TouchableOpacity  disabled={!displayCardFront}>\n                {displayCardFront ?\n                    <Animated.View style={[style1, dragStyle]} {...panResponder.panHandlers} >\n                        <CardFront suit={card.suit} value={card.value}/>\n                    </Animated.View>\n                    :\n                    <View>\n                        <Animated.View style={[style3, animatedFlipPart1Style]}>\n                            <CardBackSimple/>\n                        </Animated.View>\n                        <Animated.View style={[style2, animatedFlipPart2Style]} >\n                            <CardFront suit={card.suit} value={card.value}/>\n                        </Animated.View>\n                    </View>\n                }\n            </TouchableOpacity>\n        )\n    }\n\n    // this is the frame of the card that moves around\n    return (\n        <Animated.View style={[ { position: 'absolute', left: location.x, top: location.y }, animatedMoveStyle]}>\n            <FlippableCard/>\n        </Animated.View>\n    )\n\n})\n\nexport default PlayerCardControlled\n\n","import React, { useState } from 'react'\nimport { View, TouchableOpacity, Text, StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport GamingStacks from './GamingStacks'\nimport PlayerCardControlled from './PlayerCardControlled'\nimport { getPlayerCardActionsInDealing, getCardStartNullStates, getCardBelow } from './helperFunctions.js'\n\n\n\n// Gameboard area heights shall be the following (* unitHeight):\n//      0.5 header area\n//      1.5 computer solitaire area\n//      0.8 spacing\n//      1.0 playing packs\n//      0.8 spacing\n//      1.5 player solitaire\n//      0.5 info area\n\n\n\nconst Gameboard = (props) => {\n\n    // console.log('props', props)\n    const unitWidth = props.game.unitWidth\n    const unitHeight = unitWidth * 1.7\n    const bufferLeft = props.game.bufferLeft\n    const playerStack = props.game.playerStack\n    // const computerStack = props.game.computerStack\n    // const speed = props.game.speed\n    // const skill = props.game.skill\n\n    // stacks in the middle (to which cards will be placed during the game) are gaming stacks\n    //  values of only the topmost cards of the two stacks in the middle are relevant\n    const [topmostGamingLeft, setTopmostGamingLeft] = useState('')\n    const [topmostGamingRight, setTopmostGamingRight] = useState('')\n    const [dealingCount, setDealingCount] = useState(0)\n    const [cardNull, setCardNull] = useState(getCardStartNullStates(playerStack.length))\n    // const [disabled, setDisabled] = useState(getCardDisbaledStates(playerStack.length))\n\n    const rightDealingPackLocation = { x: (0.25 + 1 + 0.5 + 1 + 0.5 + 1 + 0.5) * unitWidth, y: (1.5 + 0.8) * unitHeight }\n    const rightGamingPackLocation = { x: (0.25 + 1 + 0.5 + 1 + 0.5) * unitWidth, y: (1.5 + 0.8) * unitHeight }\n\n    // const cardReferences = playerStack.map(card => React.createRef())\n    const [cardReferences] = useState(playerStack.map(card => React.createRef()))\n\n    const dealSolitaires = () => {\n        // console.log(cardReferences)\n        const dealingActions = getPlayerCardActionsInDealing(playerStack.length, unitWidth, bufferLeft)\n        const numberOfActions =  playerStack.length > 15 ? 15 : playerStack.length\n        for (let i = 0; i < numberOfActions; i++) {\n            cardReferences[i].current.performAction(dealingActions[i])\n        }\n    }\n    const dealSingleCards = () => {\n        const nextIndexToDeal = 15 + dealingCount\n        if (playerStack.length > nextIndexToDeal) {\n            cardReferences[nextIndexToDeal].current.performAction({ ...rightGamingPackLocation, move: true, flip: true, delay: false })\n        }\n        setTimeout(() => {\n            setDealingCount(dealingCount + 1)\n            setTopmostGamingRight(playerStack[nextIndexToDeal])\n            const updatedNullStates = [ ...cardNull]\n            updatedNullStates[nextIndexToDeal] = true\n            setCardNull(updatedNullStates)\n        }, 1600)\n    }\n\n    const updateRightGamingPack = (playerCardIndex) => {\n        setTopmostGamingRight(playerStack[playerCardIndex])\n        const updatedNullStates = [ ...cardNull]\n        updatedNullStates[playerCardIndex] = true\n        setCardNull(updatedNullStates)\n        const indexOfCardBelow = getCardBelow(playerCardIndex)\n        if (indexOfCardBelow !== -1) {\n            cardReferences[indexOfCardBelow].current.performAction({ move: false, flip: true })\n        }\n    }\n\n    const displayPlayerCards = () => {\n        return playerStack.map((card, index) => {\n            return (\n                <PlayerCardControlled\n                    key={index}\n                    index={index}\n                    unitWidth={unitWidth}\n                    origo={rightDealingPackLocation}\n                    ref={cardReferences[index]}\n                    card={card}\n                    bufferLeft={bufferLeft}\n                    isNull={cardNull[index]}\n                    topmostGamingRight={topmostGamingRight}\n                    updateRightGamingPack={updateRightGamingPack}\n                />\n            )\n        })\n    }\n\n    return (\n        <View>\n            <View style={{ position: 'absolute', left: bufferLeft + 1.75 * unitWidth, top: 2.3 * 1.7 * unitWidth, width: 2.5 * unitWidth, height: unitHeight }}>\n                <GamingStacks\n                    topmostLeft={topmostGamingLeft}\n                    topmostRight={topmostGamingRight}\n                    unitWidth={unitWidth}\n                />\n            </View>\n            {displayPlayerCards()}\n            <View style={{ flexDirection: 'row' }}>\n                <View style={[ styles.buttonContainer, { position: 'absolute', top: (1.5 + 0.8 + 1 + 0.8 + 1.5) * unitHeight }]}>\n                    <TouchableOpacity onPress={dealSolitaires} style={[styles.buttonView]}>\n                        <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>1</Text>\n                    </TouchableOpacity>\n                </View>\n                <View style={[ styles.buttonContainer, { position: 'absolute', left: 75, top: (1.5 + 0.8 + 1 + 0.8 + 1.5) * unitHeight }]}>\n                    <TouchableOpacity onPress={dealSingleCards} style={[styles.buttonView]}>\n                        <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>2</Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n\n}\n\nconst ConnectedGameboard = connect(mapStateToProps, mapDispatchToProps)(Gameboard)\n\n\nexport default ConnectedGameboard\n\n\nconst styles = StyleSheet.create({\n    buttonContainer: {\n        alignItems: 'center',\n    },\n    buttonView: {\n        backgroundColor: '#B9CC3F',\n        padding: 10,\n        borderRadius: 8,\n    },\n    buttonText: {\n        color: 'green',\n        fontFamily: 'Arial',\n    },\n})\n\n\n\n\n\n\n\n//************************\n// import React, { useState } from 'react'\n// import { View, TouchableOpacity, Text, Animated, StyleSheet } from 'react-native'\n// import { connect } from 'react-redux'\n// import { getSolitaireDealingActionsForPlayerCards, getRemovedStates,  getPlayerCardStartModes, getPlayerCardDealingModes, getPlayerCardDealingPositions, getPlayerCardsStartToPlayModes } from './gameRoundHelperFunctions.js'\n// // import GamePacks from './GamePacks'\n// import ControllablePlayerCard from './ControllablePlayerCard'\n// import GamingStacks from './GamingStacks'\n// import PlayerCard from './PlayerCard'\n\n\n\n// // Gameboard area heights shall be the following (* unitHeight):\n// //      0.5 header area\n// //      1.5 computer solitaire area\n// //      0.8 spacing\n// //      1.0 playing packs\n// //      0.8 spacing\n// //      1.5 player solitaire\n// //      0.5 info area\n\n\n\n// const Gameboard = (props) => {\n\n//     // console.log('props', props)\n//     const unitWidth = props.game.unitWidth\n//     const unitHeight = unitWidth * 1.7\n//     // take into account that there might be extra filling space on the left\n//     const bufferLeft = props.game.bufferLeft\n\n//     // stacks in the middle (to which cards will be placed during the game) are gaming stacks\n//     //  values of only the topmost cards of the two stacks in the middle are relevant\n//     const [topmostGamingLeft, setTopmostGamingLeft] = useState('')\n//     const [topmostGamingRight, setTopmostGamingRight] = useState('')\n\n//     const playerStack = props.game.playerStack\n//     const playerCardCount = playerStack.length\n//     const computerStack = props.game.computerStack\n//     const computerCardCount = computerStack.length\n//     const [playerCardRemoved, setPlayerCardRemoved] = useState(getRemovedStates(playerCardCount))\n//     const [indexOfDealing, setIndexOfDealing] = useState(15)\n\n//     let playerCardReferences = []\n//     for (let i = 0; i < playerCardCount; i++) {\n//         const newRef = React.createRef()\n//         playerCardReferences.push(newRef)\n//     }\n//     const rightPackPosition = { x: bufferLeft + 4.75 * unitWidth, y: (1.5 + 0.8) * 1.7 * unitWidth }\n\n\n//     const dealSolitaireCards = () => {\n//         const actions = getSolitaireDealingActionsForPlayerCards(playerStack)\n//         for (let i = 0; i < playerCardCount; i++) {\n//             const action = actions[i]\n//             if (action !== '') {\n//                 playerCardReferences[i].current.performCardAction(action)\n//             }\n//         }\n//     }\n\n//     const dealNewCards = () => {\n\n//         // case: both dealing stacks contain at least one more card to be dealt\n//         if (computerCardCount - 1 > indexOfDealing && playerCardCount - 1 > indexOfDealing) {\n//             playerCardReferences[indexOfDealing].current.performCardAction('moveToRightGamePackAndFlip')\n//             setTimeout(() => {\n//                 // setTopmostGamingRight(playerStack[indexOfDealing])\n//                 let updatedRemovalStates = playerCardRemoved.map((status, index) => {\n//                     if (index === indexOfDealing) {\n//                         return true\n//                     } else {\n//                         return status\n//                     }\n//                 })\n//                 console.log('updatedRemovalStates', updatedRemovalStates)\n//                 // setPlayerCardRemoved(updatedRemovalStates)\n//                 // setIndexOfDealing(indexOfDealing + 1)\n//             }, 3000)\n//         }\n//     }\n\n\n//     // const [playerCardModes, setPlayerCardModes] = useState(getPlayerCardStartModes(props.game.playerStack))\n//     // const [playerCardPositions, setPlayerCardPositions] = useState(getPlayerCardDealingPositions(props.game.playerStack, unitWidth, bufferLeft))\n\n//     // // monettako korttia ollaan jakamassa pinosta?\n//     // const [topmostToDeal, setTopmostToDeal] = useState(props.game.playerStack.length > 15 ? 15 : -1)\n\n//     // // korttipakat, joihin pelataan; päälimmäinen, näkyvä kortti vasemmalla ja oikealla\n//     // const [topmostLeft, setTopmostLeft] = useState('')\n//     // const [topmostRight, setTopmostRight] = useState('')\n\n//     // const visibility = new Animated.Value(1)\n//     // const animatedVisibility = { opacity: visibility }\n//     // const dealCards = () => {\n//     //     Animated.timing(visibility, {\n//     //         toValue: 0, duration: 500,\n//     //     }).start()\n//     //     const playerCardDealingModes = getPlayerCardDealingModes(props.game.playerStack)\n//     //     setTimeout(() => {\n//     //         setPlayerCardModes(playerCardDealingModes)\n//     //     },1100)\n//     //     setTimeout(() => {\n//     //         const updatedModes = getPlayerCardsStartToPlayModes(playerCardDealingModes)\n//     //         setPlayerCardModes(updatedModes)\n//     //     }, 13000)\n//     // }\n\n\n\n//     // const handleDealtNewCards = () => {\n\n//     //     // mikä on seuraava kortti, joka pinosta jaetaan? topmostToDeal\n//     //     const updatedRight = props.game.playerStack.length > topmostToDeal ?\n//     //         { suit: props.game.playerStack[topmostToDeal].suit, value: props.game.playerStack[topmostToDeal].value }\n//     //         :\n//     //         ''\n//     //     const updatedLeft = props.game.computerStack.length > topmostToDeal ?\n//     //         { suit: props.game.computerStack[topmostToDeal].suit, value: props.game.computerStack[topmostToDeal].value }\n//     //         :\n//     //         ''\n//     //     const updatedModes = playerCardModes.map((current, index) => {\n//     //         if (index === topmostToDeal) {\n//     //             return 0\n//     //         } else {\n//     //             return current\n//     //         }\n//     //     })\n//     //     setTopmostLeft(updatedLeft)\n//     //     setTopmostRight(updatedRight)\n//     //     setTopmostToDeal(topmostToDeal + 1)\n//     //     setPlayerCardModes(updatedModes)\n//     // }\n\n\n//     // const controlCard = () => {\n//     //     setTimeout(() => {\n//     //         referenceCard.current.actOnCard('moveToRightGamePack')\n//     //     }, 0)\n//     //     setTimeout(() => {\n//     //         referenceCard.current.actOnCard('moveToLeftGamePack')\n//     //     }, 1500)\n//     //     setTimeout(() => {\n//     //         referenceCard.current.actOnCard('flip')\n//     //     }, 3000)\n//     //     setTimeout(() => {\n//     //         referenceCard.current.actOnCard('moveFurther')\n//     //     }, 4500)\n//     // }\n//     // const referenceCard = React.createRef()\n\n//     const PlayerCards = () => {\n//         return playerStack.map((card, index) => {\n//             return (\n//                 <ControllablePlayerCard\n//                     key={index}\n//                     card={card}\n//                     index={index}\n//                     ref={playerCardReferences[index]}\n//                     cardOrigo={rightPackPosition}\n//                     unitWidth={unitWidth}\n//                     bufferLeft={bufferLeft}\n//                     removed={playerCardRemoved[index]}\n//                 />\n//             )\n//         })\n//     }\n\n\n\n//     const [actionsCount, setActionsCount] = useState(0)\n//     const refC = React.createRef()\n\n//     const actOnCard1 = () => {\n\n//         refC.current.performAction({ x:150 , y:100 })\n//         setTimeout(() => {\n//             setActionsCount(actionsCount + 1)\n\n//         }, 2000)\n//     }\n//     const actOnCard2 = () => {\n\n//         refC.current.performAction({ x:100 , y:200 })\n//         setTimeout(() => {\n//             setActionsCount(actionsCount + 1)\n//         }, 2000)\n//     }\n//     const actOnCard3 = () => {\n\n//         refC.current.performAction({ x:300 , y:300 })\n//         setTimeout(() => {\n//             setActionsCount(actionsCount + 1)\n//         }, 2000)\n//     }\n//     const actOnCard4 = () => {\n\n//         refC.current.performAction({ x:50 , y:400 })\n//         setTimeout(() => {\n//             setActionsCount(actionsCount + 1)\n//         }, 2000)\n//     }\n//     const flipIt = () => {\n\n//         refC.current.performAction({ x: -1, y: -1 })\n//         setTimeout(() => {\n//             setActionsCount(actionsCount + 1)\n//         }, 2000)\n//     }\n\n//     return (\n//         <View>\n\n//             <Text>tilaa muutettu {actionsCount} kertaa</Text>\n//             {/* <View style={{ position: 'absolute', left: bufferLeft + 1.75 * unitWidth, top: 2.3 * 1.7 * unitWidth, width: 2.5 * unitWidth, height: unitHeight }}>\n//                 <GamingStacks\n//                     topmostLeft={topmostGamingLeft}\n//                     topmostRight={topmostGamingRight}\n//                     unitWidth={unitWidth}\n//                 />\n//             </View> */}\n//             {/* <PlayerCards/> */}\n//             <View style={{ position: 'absolute', top: 100, left: 150, width: unitWidth, height: unitHeight, backgroundColor: 'powderblue' }}><Text>1</Text></View>\n//             <View style={{ position: 'absolute', top: 200, left: 100, width: unitWidth, height: unitHeight, backgroundColor: 'rosybrown' }}><Text>2</Text></View>\n//             <View style={{ position: 'absolute', top: 300, left: 300, width: unitWidth, height: unitHeight, backgroundColor: 'powderblue' }}><Text>3</Text></View>\n//             <View style={{ position: 'absolute', top: 400, left: 50, width: unitWidth, height: unitHeight, backgroundColor: 'papayawhip' }}><Text>4</Text></View>\n//             <PlayerCard\n//                 cardOrigo={rightPackPosition}\n//                 unitWidth={unitWidth}\n//                 ref={refC}\n//             />\n//             <View style={{ flexDirection: 'row' }}>\n//                 <View style={[ styles.buttonContainer, { position: 'absolute', top: (1.5 ) * unitHeight }]}>\n//                     <TouchableOpacity onPress={actOnCard1} style={[styles.buttonView]}>\n//                         <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>1</Text>\n//                     </TouchableOpacity>\n//                 </View>\n//                 <View style={[ styles.buttonContainer, { position: 'absolute', left: 75, top: (1.5 ) * unitHeight }]}>\n//                     <TouchableOpacity onPress={actOnCard2} style={[styles.buttonView]}>\n//                         <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>2</Text>\n//                     </TouchableOpacity>\n//                 </View>\n//                 <View style={[ styles.buttonContainer, { position: 'absolute', left: 150, top: (1.5 ) * unitHeight }]}>\n//                     <TouchableOpacity onPress={actOnCard3} style={[styles.buttonView]}>\n//                         <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>3</Text>\n//                     </TouchableOpacity>\n//                 </View>\n//                 <View style={[ styles.buttonContainer, { position: 'absolute', left: 200, top: (1.5 ) * unitHeight }]}>\n//                     <TouchableOpacity onPress={actOnCard4} style={[styles.buttonView]}>\n//                         <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>4</Text>\n//                     </TouchableOpacity>\n//                 </View>\n//                 <View style={[ styles.buttonContainer, { position: 'absolute', left: 275, top: (1.5 ) * unitHeight }]}>\n//                     <TouchableOpacity onPress={flipIt} style={[styles.buttonView]}>\n//                         <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>flipIt</Text>\n//                     </TouchableOpacity>\n//                 </View>\n//             </View>\n\n\n\n\n//         </View>\n//     )\n// }\n\n// const mapStateToProps = state => {\n//     return {\n//         game: state.game,\n//     }\n// }\n\n// const mapDispatchToProps = {\n\n// }\n\n// const ConnectedGameboard = connect(mapStateToProps, mapDispatchToProps)(Gameboard)\n\n\n// export default ConnectedGameboard\n\n\n// const styles = StyleSheet.create({\n//     buttonContainer: {\n//         alignItems: 'center',\n//     },\n//     buttonView: {\n//         backgroundColor: '#B9CC3F',\n//         padding: 10,\n//         borderRadius: 8,\n//     },\n//     buttonText: {\n//         color: 'green',\n//         fontFamily: 'Arial',\n//     },\n// })\n\n\n\n\n\n/*\n    // console.log('props', props)\n    const unitWidth = props.game.unitWidth\n    const unitHeight = unitWidth * 1.7\n    const bufferLeft = props.game.bufferLeft\n    const rightPackPosition = { x: bufferLeft + 4.75 * unitWidth, y: (1.5 + 0.8) * 1.7 * unitWidth }\n\n    const [playerCardModes, setPlayerCardModes] = useState(getPlayerCardStartModes(props.game.playerStack))\n    const [playerCardPositions, setPlayerCardPositions] = useState(getPlayerCardDealingPositions(props.game.playerStack, unitWidth, bufferLeft))\n\n    // monettako korttia ollaan jakamassa pinosta?\n    const [topmostToDeal, setTopmostToDeal] = useState(props.game.playerStack.length > 15 ? 15 : -1)\n\n    // korttipakat, joihin pelataan; päälimmäinen, näkyvä kortti vasemmalla ja oikealla\n    const [topmostLeft, setTopmostLeft] = useState('')\n    const [topmostRight, setTopmostRight] = useState('')\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n    const dealCards = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 500,\n        }).start()\n        const playerCardDealingModes = getPlayerCardDealingModes(props.game.playerStack)\n        setTimeout(() => {\n            setPlayerCardModes(playerCardDealingModes)\n        },1100)\n        setTimeout(() => {\n            const updatedModes = getPlayerCardsStartToPlayModes(playerCardDealingModes)\n            setPlayerCardModes(updatedModes)\n        }, 13000)\n    }\n\n    const handleMoveToLeftGamePack = (cardIndex) => {\n\n    }\n\n    const continuePlaying = () => {\n        if (topmostToDeal !== -1) {\n            const updatedModes = playerCardModes.map((current, index) => {\n                if (index === topmostToDeal) {\n                    return 4\n                } else {\n                    return current\n                }\n            })\n            setPlayerCardModes(updatedModes)\n        }\n    }\n\n    const handleDealtNewCards = () => {\n\n        // mikä on seuraava kortti, joka pinosta jaetaan? topmostToDeal\n        const updatedRight = props.game.playerStack.length > topmostToDeal ?\n            { suit: props.game.playerStack[topmostToDeal].suit, value: props.game.playerStack[topmostToDeal].value }\n            :\n            ''\n        const updatedLeft = props.game.computerStack.length > topmostToDeal ?\n            { suit: props.game.computerStack[topmostToDeal].suit, value: props.game.computerStack[topmostToDeal].value }\n            :\n            ''\n        const updatedModes = playerCardModes.map((current, index) => {\n            if (index === topmostToDeal) {\n                return 0\n            } else {\n                return current\n            }\n        })\n        setTopmostLeft(updatedLeft)\n        setTopmostRight(updatedRight)\n        setTopmostToDeal(topmostToDeal + 1)\n        setPlayerCardModes(updatedModes)\n    }\n*/\n\n// <PlayerSolitaire\n//     cards={props.game.playerStack}\n//     cardModes={playerCardModes}\n//     cardPositions={playerCardPositions}\n//     unitWidth={unitWidth}\n//     rightPackPosition={rightPackPosition}\n//     bufferLeft={bufferLeft}\n//     handleMoveToLeftGamePack={handleMoveToLeftGamePack}\n//     handleDealtNewCards={handleDealtNewCards}\n// />\n// <View style={{ flexDirection: 'row' }}>\n//     <Animated.View style={[animatedVisibility, styles.buttonContainer, { position: 'absolute', top: (1.5 + 0.8 + 1 + 0.8 + 1.5) * unitHeight }]}>\n//         <TouchableOpacity onPress={dealCards} style={[styles.buttonView]}>\n//             <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>deal cards</Text>\n//         </TouchableOpacity>\n//     </Animated.View>\n//     <Animated.View style={[ styles.buttonContainer, { position: 'absolute', left: 200, top: (1.5 + 0.8 + 1 + 0.8 + 1.5) * unitHeight }]}>\n//         <TouchableOpacity onPress={continuePlaying} style={[styles.buttonView]}>\n//             <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>continue</Text>\n//         </TouchableOpacity>\n//     </Animated.View>\n// </View>\n","import React from 'react'\nimport {  View, Text, TouchableOpacity, Animated, StyleSheet } from 'react-native'\n\n\n\nconst StartSettingQuestion = ({ start, unitHeight }) => {\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n    const fadeOut = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n        setTimeout(() => {\n            start()\n        }, 1000)\n    }\n\n    return (\n\n        <View>\n            <Animated.View style={animatedVisibility}>\n                <View style={styles.container}>\n                    <Text style={[styles.questionText, { fontSize: unitHeight / 5 }]}>feel like playing?</Text>\n                    <TouchableOpacity onPress={fadeOut} style={[styles.buttonView, { marginTop: unitHeight / 3 }]}>\n                        <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>setup a new game</Text>\n                    </TouchableOpacity>\n                </View>\n            </Animated.View>\n        </View>\n    )\n\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginTop: 50,\n    },\n    questionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n    },\n    buttonView: {\n        backgroundColor: '#B9CC3F',\n        padding: 10,\n        borderRadius: 8,\n    },\n    buttonText: {\n        color: 'green',\n        fontFamily: 'Arial',\n    },\n})\n\n\n\n\nexport default StartSettingQuestion\n\n","import React from 'react'\nimport {  View } from 'react-native'\n\nconst SmallDot = ({ value, dotViewWidth, dotNumber }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        opacity: changingOpacity,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 3,\n    }\n\n\n    return (\n        <View style={styleOuterView}>\n            <View style={styleInnerView}/>\n        </View>\n    )\n}\n\nexport default SmallDot\n\n","import React from 'react'\nimport {  View, TouchableOpacity } from 'react-native'\n\n\nconst LargeDot = ({ value, dotNumber, dotViewWidth, handleSelectionChanged }) => {\n\n    const changingOpacity = (value >= dotNumber) ? 1 : 0.2\n\n    const styleOuterView = {\n        width: dotViewWidth,\n        height: dotViewWidth * 1.4,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderWidth: 1.5,\n        opacity: changingOpacity,\n        borderColor: '#B9CC3F',\n        borderRadius: dotViewWidth,\n    }\n    const styleInnerView = {\n        width: 4,\n        height: 4,\n        backgroundColor: '#B9CC3F',\n        borderRadius: 2.0,\n    }\n\n\n    return (\n        <TouchableOpacity onPress={() => handleSelectionChanged(dotNumber)}>\n            <View style={styleOuterView}>\n                <View  style={styleInnerView}/>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default LargeDot","import React, { useState, useImperativeHandle } from 'react'\nimport {  View, Text, StyleSheet } from 'react-native'\nimport SmallDot from './SmallDot'\nimport LargeDot from './LargeDot'\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginBottom: 50,\n    },\n    instructionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n        marginBottom: 15,\n    },\n    dotSliderView: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n})\n\n\n\nconst DottedSelectionSlider = React.forwardRef((props, ref) => {\n\n    const instruction = props.item === 'skill' ?\n        'select opponent skill level'\n        :\n        'select opponent speed'\n    const unitWidth = props.unitWidth\n    const unitHeight = unitWidth * 1.7\n    const number = props.number\n    const dotViewWidth = 6 * unitWidth / 30\n\n    const [value, setValue] = useState(1)\n\n    const handleSelectionChanged = (newValue) => {\n        let startValue = value\n        const changes = Math.max(newValue - value, value - newValue)\n        function changeDotIntervalUp() {\n            return setInterval(() => {\n                if (startValue < newValue) {\n                    startValue++\n                    setValue(startValue)\n                }\n            }, 180 / changes)\n        }\n        function changeDotIntervalDown() {\n            return setInterval(() => {\n                if (newValue < startValue) {\n                    startValue--\n                    setValue(startValue)\n                }\n            }, 180 / changes)\n        }\n        let changeInterval\n        if (value < newValue) {\n            changeInterval = changeDotIntervalUp()\n        } else if (value > newValue) {\n            changeInterval = changeDotIntervalDown()\n        }\n        setTimeout(() => {\n            clearInterval(changeInterval)\n        }, 180 * changes)\n    }\n\n    const getSelectedValue = () => {\n        return (value - 1) / 6 + 1\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedValue }\n    })\n\n    const displayDotSlider = () => {\n        let dots = []\n        for (let i = 1; i <= number * 6 + 1; i++) {\n            if ((i - 1) % 6 !== 0) {\n                dots.push(\n                    <SmallDot\n                        key={i}\n                        value={value}\n                        dotViewWidth={dotViewWidth}\n                        dotNumber={i}\n                    />)\n            } else {\n                dots.push(\n                    <LargeDot\n                        key={i}\n                        value={value}\n                        dotViewWidth={dotViewWidth}\n                        handleSelectionChanged={handleSelectionChanged}\n                        dotNumber={i}\n                    />)\n            }\n        }\n        return dots\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text style={[styles.instructionText, { fontSize: unitHeight / 5 }]}>{instruction}</Text>\n            <View style={styles.dotSliderView}>\n                {displayDotSlider()}\n            </View>\n        </View>\n\n    )\n})\n\nexport default DottedSelectionSlider\n\n\n","import React from 'react'\nimport { Image } from 'react-native'\nimport cardBackImage from '../../images/kukat.jpg'\n\nconst CardBack = () => {\n\n\n    return (\n        <Image\n            style={{ flex: 1, borderRadius: 7 }}\n            source={cardBackImage}\n        />\n    )\n}\n\nexport default CardBack\n\n\n\n","import React from 'react'\nimport { View, TouchableOpacity } from 'react-native'\nimport CardBack from '../cardSides/CardBack'\n\nconst Stack = ({ displayColor, number, selectStack, unitWidth }) => {\n\n    const stackStyle = {\n        width: unitWidth * 1.5,\n        height: unitWidth * 1.7 * 1.3,\n        borderRadius: 7 * 1.3, borderWidth: 1.3,\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n\n    return (\n        <TouchableOpacity onPress={() => selectStack(number)}>\n            <View style={[stackStyle, displayColor]}>\n                <View style={{ width: unitWidth, height: unitWidth * 1.7, borderRadius: 7 }}>\n                    <CardBack/>\n                </View>\n            </View>\n        </TouchableOpacity>\n    )\n}\n\nexport default Stack\n\n","import React, { useState, useImperativeHandle } from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\nimport Stack from './Stack'\n\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginBottom: 50,\n    },\n    instructionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n        marginBottom: 15,\n    },\n})\n\n\nconst SelectStack = React.forwardRef((props, ref) => {\n\n    const unitWidth = props.unitWidth\n    const unitHeight = unitWidth * 1.7\n\n    const [selectedStack, setSelectedStack] = useState(0)\n\n    const changedSelection = (id) => {\n        setSelectedStack(id)\n    }\n\n    const getSelectedStack = () => {\n        const computerStack = selectedStack === 0 ? 1 : 0\n        return { player: selectedStack, computer: computerStack }\n    }\n    useImperativeHandle(ref, () => {\n        return { getSelectedStack }\n    })\n\n    const borderColorStack1 = selectedStack === 0 ? { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n    const borderColorStack2 = selectedStack === 1 ?  { borderColor: '#B9CC3F' } : { borderColor: 'green' }\n\n\n    return (\n        <View style={styles.container}>\n            <Text style={[styles.instructionText, { fontSize: unitHeight / 5 }]}>select your stack of cards</Text>\n            <View style={{ flexDirection: 'row' }}>\n                <Stack displayColor={borderColorStack1} number={0} selectStack={changedSelection} unitWidth={unitWidth}/>\n                <View style={{ width: 30 }}/>\n                <Stack displayColor={borderColorStack2} number={1} selectStack={changedSelection} unitWidth={unitWidth}/>\n            </View>\n        </View>\n    )\n})\n\nexport default SelectStack\n\n","const initialState = { isOn: false }\n\nconst gameReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n    case 'SET_GAME_SETTINGS':\n        return action.data\n    default:\n        return state\n    }\n\n}\n\nexport const setGameSettings = (settings) => {\n    return {\n        type: 'SET_GAME_SETTINGS',\n        data: settings,\n    }\n}\n\n\nexport default gameReducer\n\n","import React, { useState } from 'react'\nimport { View, Text, TouchableOpacity, StyleSheet, Animated } from 'react-native'\nimport { connect } from 'react-redux'\nimport StartSettingQuestion from './StartSettingQuestion'\nimport DottedSelectionSlider from './DottedSelectionSlider'\nimport SelectStack from './SelectStack'\nimport { setGameSettings } from '../../reducers/gameReducer'\nimport { createStacks } from './createStacks.js'\n\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        marginTop: 50,\n    },\n    questionText: {\n        color: '#B9CC3F',\n        fontFamily: 'Arial',\n        fontWeight: 'bold',\n    },\n    buttonView: {\n        backgroundColor: '#B9CC3F',\n        padding: 10,\n        borderRadius: 8,\n    },\n    buttonText: {\n        color: 'green',\n        fontFamily: 'Arial',\n    },\n})\n\n\n\nconst SetUpNewGame = (props) => {\n\n    const [startSetting, setStartSetting] = useState(false)\n    const unitHeight = props.unitHeight\n    const unitWidth = props.unitWidth\n    const bufferLeft = props.bufferLeft\n\n    const visibility = new Animated.Value(1)\n    const animatedVisibility = { opacity: visibility }\n\n    const start = () => {\n        setStartSetting(true)\n    }\n\n    const referenceSkill = React.createRef()\n    const referenceSpeed = React.createRef()\n    const referenceStack = React.createRef()\n\n    const saveSettings = () => {\n        Animated.timing(visibility, {\n            toValue: 0, duration: 1000,\n        }).start()\n\n        const stacks = createStacks()\n\n        setTimeout(() => {\n            props.setGameSettings({\n                skill: referenceSkill.current.getSelectedValue(),\n                speed: referenceSpeed.current.getSelectedValue(),\n                playerStack: stacks[referenceStack.current.getSelectedStack().player],\n                computerStack : stacks[referenceStack.current.getSelectedStack().computer],\n                isOn: true,\n                unitWidth: unitWidth,\n                bufferLeft: bufferLeft,\n            })\n        }, 1000)\n    }\n\n    return (\n        <Animated.View style={animatedVisibility}>\n            {!startSetting ?\n                <StartSettingQuestion start={start} unitHeight={unitHeight}/>\n                :\n                <View style={styles.container}>\n                    <DottedSelectionSlider\n                        item=\"skill\"\n                        unitWidth={unitWidth}\n                        number={2}\n                        ref={referenceSkill}\n                    />\n                    <DottedSelectionSlider\n                        item=\"speed\"\n                        unitWidth={unitWidth}\n                        number={4}\n                        ref={referenceSpeed}\n                    />\n                    <SelectStack\n                        unitWidth={unitWidth}\n                        ref={referenceStack}\n                    />\n                    <TouchableOpacity onPress={saveSettings} style={styles.buttonView}>\n                        <Text style={[styles.buttonText, { fontSize: unitHeight / 6 }]}>save settings</Text>\n                    </TouchableOpacity>\n                </View>\n            }\n        </Animated.View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n    setGameSettings,\n}\n\nconst ConnectedSetUpNewGame = connect(mapStateToProps, mapDispatchToProps)(SetUpNewGame)\n\nexport default ConnectedSetUpNewGame\n","import shuffle from 'shuffle-array'\n\nexport const createStacks = () => {\n    const stack = []\n    for (let j = 1; j < 5; j++) {\n\n        for (let i = 1; i < 14; i++) {\n            stack.push({ suit: j, value: i })\n        }\n\n    }\n\n    const stackShuffled = shuffle(stack)\n\n    return [ stackShuffled.slice(0, 26), stackShuffled.slice(26) ]\n}\n\n","import React from 'react'\nimport { View, Text, Dimensions, StyleSheet } from 'react-native'\nimport { connect } from 'react-redux'\nimport Gameboard from './PlayTheGame/Gameboard'\nimport SetUpNewGame from '../components/SetUpNewGame/SetUpNewGame'\n\n\nconst NopsaGame = (props) => {\n\n    const screenWidth = Dimensions.get('window').width\n    const screenHeight = Dimensions.get('window').height\n    const unitWidth = Math.min(screenWidth / 6, (screenHeight / (6.6 * 1.7)))\n    const unitHeight = 1.7 * unitWidth\n    const bufferLeft = (screenWidth - 6 * unitWidth) / 2\n\n    const styles = StyleSheet.create({\n        screen: {\n            backgroundColor: 'green',\n            alignItems: 'center',\n            width: screenWidth,\n            height: screenHeight,\n            // justifyContent: 'center',\n        },\n        appContainer: {\n            width: unitWidth * 6,\n            height: unitHeight * 6.6,\n            backgroundColor: 'green',\n        },\n        titleView: {\n            height: unitHeight / 2,\n            alignItems: 'center',\n        },\n        titleText: {\n            fontSize: unitHeight / 3.75,\n            fontWeigth: 'bold',\n            color: '#B9CC3F',\n            fontFamily: 'Arial Black',\n        },\n        infoText: {\n            fontSize: unitHeight / 9,\n            color: '#B9CC3F',\n            fontFamily: 'Arial',\n        },\n    })\n\n    const Header = () => {\n        return (\n            <View style={styles.titleView}>\n                <Text style={styles.titleText}>nopsa</Text>\n                <Text style={styles.infoText}>a card game for those with skill, speed and luck</Text>\n            </View>\n        )\n    }\n\n\n    return (\n        <View>\n            {/* <View style={{ width: unitWidth, height: 0.5 * unitHeight, backgroundColor: 'powderblue' }}></View>\n            <View style={{ width: unitWidth, height: 1.5 * unitHeight, backgroundColor: 'blue' }}></View>\n            <View style={{ width: unitWidth, height: 0.8 * unitHeight, backgroundColor: 'rosybrown' }}></View>\n            <View style={{ width: unitWidth, height: unitHeight, backgroundColor: 'blue' }}></View>\n            <View style={{ width: unitWidth, height: 0.8 * unitHeight, backgroundColor: 'rosybrown' }}></View>\n            <View style={{ width: unitWidth, height: 1.5 * unitHeight, backgroundColor: 'blue' }}></View>\n            <View style={{ width: unitWidth, height: 0.5 * unitHeight, backgroundColor: 'powderblue' }}></View> */}\n            <View style={styles.screen}>\n                <View style={styles.appContainer}>\n                    <Header/>\n                    {props.game.isOn ?\n                        <Gameboard/>\n                        :\n                        <SetUpNewGame\n                            unitWidth={unitWidth}\n                            unitHeight={unitHeight}\n                            bufferLeft={bufferLeft}\n                        />\n\n                    }\n                </View>\n            </View>\n        </View>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        game: state.game,\n    }\n}\n\nconst mapDispatchToProps = {\n}\n\nconst ConnectedNopsaGame = connect(mapStateToProps, mapDispatchToProps)(NopsaGame)\n\nexport default ConnectedNopsaGame\n\n\n\n\n","import { combineReducers } from 'redux'\nimport gameReducer from './gameReducer'\n\nconst rootReducer = combineReducers({\n    game: gameReducer,\n})\n\nexport default rootReducer\n\n\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport NopsaGame from './components/NopsaGame'\nimport rootReducer from './reducers/rootReducer'\n\n\nconst store = createStore(rootReducer)\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <NopsaGame/>\n        </Provider>\n    )\n}\n\nexport default App\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n// import './index.css'\nimport App from './App'\n// import * as serviceWorker from './serviceWorker'\n\n// ReactDOM.render(\n//     <React.StrictMode>\n//         <App />\n//     </React.StrictMode>,\n//     document.getElementById('root'),\n// )\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister()\n\n\n","module.exports = __webpack_public_path__ + \"static/media/kukat.9a1d9e25.jpg\";"],"sourceRoot":""}